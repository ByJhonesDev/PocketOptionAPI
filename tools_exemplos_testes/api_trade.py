r"""
# Autor: ByJhonesDev
#
# Projeto: Exemplo de Ordem ‚Äî API Async PocketOption
#
# Fun√ß√£o Geral:
# - Conecta em conta DEMO usando SSID 
# - Obter saldo e dados de mercado (velas)
# - Enviar 1 ordem autom√°tica (CALL por padr√£o) com dura√ß√£o de 60s, aguardar expira√ß√£o e calcular lucro real.
# - Salvar o resultado no arquivo de hist√≥rico.
# - Converter automaticamente booleanos para ‚ÄúSim/N√£o‚Äù nas Estat√≠sticas de Conex√£o.
#
# Principais Caracter√≠sticas do Log:
# - Sess√µes: Resultados anteriores, Autentica√ß√£o e Conex√£o, Dados de Mercado (√öltima Vela),
#   Estat√≠sticas de Conex√£o (True/False ‚Üí Sim/N√£o), Opera√ß√µes Autom√°ticas e Finaliza√ß√£o.
#
# Entradas/Sa√≠das:
# - Entradas: nenhuma via stdin (SSID √© fixo no c√≥digo; ativo, valor, dire√ß√£o e dura√ß√£o via constantes).
# - Sa√≠das: prints estruturados em PT-BR e grava√ß√£o de uma linha por opera√ß√£o no arquivo de resultados.
#
# Configura√ß√µes Importantes:
# - SSID_FIXO: SSID DEMO j√° definido no c√≥digo.
# - LOGS_DIR / RESULTADOS_FILE: caminhos de logs/resultados.
# - ASSET, AMOUNT, DIRECTION, DURATION, MAX_RETRIES: par√¢metros da ordem.
#
# Depend√™ncias:
# - Python 3.10+
# - pocketoptionapi_async (AsyncPocketOptionClient, OrderDirection)
# - pandas
#
# Seguran√ßa:
# - SSID √© sens√≠vel. Evite publicar/commitar este arquivo com SSID real.
# - Operar sempre em conta DEMO para testes antes de qualquer uso real.
#
# Observa√ß√µes:
# - O SDK interno do cliente foi mantido com enable_logging=False para reduzir ru√≠do.
# - O c√°lculo de lucro real usa a diferen√ßa de saldo ap√≥s a expira√ß√£o.
# - Caso o check_win atinja timeout, o log informa e mant√©m o fluxo com o lucro calculado.
"""

from pocketoptionapi_async import AsyncPocketOptionClient, OrderDirection
import asyncio
import pandas as pd
import os
from datetime import datetime

# =========================
# Configura√ß√µes Fixas
# =========================
SSID_FIXO = '42["auth",{"session":"h9gku7n5qesi0ashsfop829bc5","isDemo":1,"uid":80056933,"platform":2,"isFastHistory":true,"isOptimized":true}]'  # SSID da conta DEMO
LOGS_DIR = r'C:\JhonesProIABoT\Logs'  # Pasta onde os logs ser√£o salvos
RESULTADOS_FILE = os.path.join(LOGS_DIR, 'resultados_gerais_pkt.txt')
ASSET = 'AUDCAD_otc'
AMOUNT = 1000.0         # Valor da entrada (USD)
DIRECTION = OrderDirection.CALL
DURATION = 60           # em segundos
MAX_RETRIES = 3

# Cria diret√≥rio se n√£o existir
os.makedirs(LOGS_DIR, exist_ok=True)

# =========================
# Utilidades de Log / Formata√ß√£o
# =========================
def bool_pt(v):
    """Converte True/False para Sim/N√£o, preservando outros valores."""
    if isinstance(v, bool):
        return "Sim" if v else "N√£o"
    return v

def load_resultados():
    """Carrega resultado anterior (√∫ltima linha) para exibir no cabe√ßalho."""
    if os.path.exists(RESULTADOS_FILE):
        with open(RESULTADOS_FILE, 'r', encoding='utf-8') as f:
            lines = f.readlines()
            return lines[-1].strip() if lines else "Nenhum resultado anterior."
    return "Arquivo de resultados n√£o encontrado."

def save_resultados(resultado_str):
    """Salva novo resultado no arquivo (append)."""
    with open(RESULTADOS_FILE, 'a', encoding='utf-8') as f:
        timestamp = datetime.now().strftime("%d-%m-%Y %H:%M:%S")
        f.write(f"[{timestamp}] {resultado_str}\n")
    print(f"‚úÖ Resultados salvos em: {RESULTADOS_FILE}")

def get_resultado_final(calculated_profit, win_result, status):
    """Determina Vit√≥ria/Derrota baseado no lucro calculado, win_result ou status."""
    if calculated_profit > 0:
        return "Vit√≥ria"
    elif calculated_profit < 0:
        return "Derrota"
    elif status in ('won', 'win'):
        return "Vit√≥ria"
    elif status in ('loss', 'lost'):
        return "Derrota"
    elif status in ('active', 'pending'):
        return "Pendente"
    else:
        # win_result pode ser num√©rico em algumas libs
        try:
            if win_result is not None:
                if float(win_result) > 0:
                    return "Vit√≥ria"
                if float(win_result) < 0:
                    return "Derrota"
        except Exception:
            pass
        return "Empate/Indefinido"

def format_dt_full(dt):
    """Formata datetime para DD-MM-YYYY HH:MM:SS; aceita datetime ou texto."""
    if isinstance(dt, datetime):
        return dt.strftime("%d-%m-%Y %H:%M:%S")
    return str(dt)

# =========================
# Fun√ß√µes ass√≠ncronas de API
# =========================
async def get_balance(client):
    try:
        balance = await client.get_balance()
        return balance.balance, balance.currency
    except Exception as e:
        print(f"‚ùå Erro ao obter saldo: {e}")
        return 0.0, 'USD'

async def get_candles(client, asset=ASSET, timeframe=60):
    try:
        candles = await client.get_candles(asset=asset, timeframe=timeframe)
        if candles:
            ultima_vela = candles[0]  # geralmente a mais recente
            return len(candles), ultima_vela
        return 0, None
    except Exception as e:
        print(f"‚ùå Erro ao obter velas: {e}")
        return 0, None

async def get_candles_dataframe(client, asset=ASSET, timeframe=60):
    try:
        df = await client.get_candles_dataframe(asset=asset, timeframe=timeframe)
        return df
    except Exception as e:
        print(f"‚ùå Erro ao obter DataFrame de velas: {e}")
        return pd.DataFrame()

async def get_active_orders(client):
    try:
        orders = await client.get_active_orders()
        return orders
    except Exception as e:
        print(f"‚ùå Erro ao obter ordens ativas: {e}")
        return []

async def place_order(client, symbol=ASSET, amount=AMOUNT, direction=DIRECTION, duration=DURATION, max_retries=MAX_RETRIES):
    for attempt in range(max_retries):
        try:
            print("\nüöÄ Opera√ß√µes Autom√°ticas")
            print("----------------------------------------")
            print(f"üì§ Enviando Ordem Autom√°tica (Tentativa {attempt+1}/{max_retries})")
            print(f"   üíπ Ativo: {symbol}")
            print(f"   üíµ Valor: ${amount}")
            print(f"   üéØ Dire√ß√£o: {direction.name}")
            print(f"   ‚è±Ô∏è  Dura√ß√£o: {duration} Segundos")
            order = await client.place_order(asset=symbol, amount=amount, direction=direction, duration=duration)
            if order and not getattr(order, 'error_message', None):
                print("‚úÖ Ordem Enviada com Sucesso!")
                return order
            else:
                error_msg = getattr(order, 'error_message', 'Erro desconhecido')
                print(f"‚ö†Ô∏è Tentativa {attempt+1} falhou: {error_msg}")
                if attempt < max_retries - 1:
                    await asyncio.sleep(2)
        except Exception as e:
            print(f"‚ùå Erro na tentativa {attempt+1}: {e}")
            if attempt < max_retries - 1:
                await asyncio.sleep(2)
    print("‚ùå Todas as tentativas de envio falharam.")
    return None

async def check_order_result_with_timeout(client, order_id, timeout=30):
    try:
        result = await asyncio.wait_for(client.check_order_result(order_id), timeout=timeout)
        return result
    except asyncio.TimeoutError:
        return None
    except Exception as e:
        print(f"‚ùå Erro no check_order_result: {e}")
        return None

async def wait_for_expiry_and_check(client, order_id, initial_balance, duration=DURATION):
    """Espera expirar + buffer, checa resultado e calcula lucro via diferen√ßa de saldo."""
    buffer_s = 30
    print(f"‚è≥ Aguardando Expira√ß√£o da Negocia√ß√£o ({duration + buffer_s}s)...")
    await asyncio.sleep(duration + buffer_s)

    print("üîÑ Verificando Resultado Final...")
    final_result = await check_order_result_with_timeout(client, order_id)

    win_result = None
    try:
        win_result = await asyncio.wait_for(client.check_win(order_id), timeout=30)
        if win_result is not None:
            print(f"üèÅ Verifica√ß√£o de Win conclu√≠da: {win_result}")
    except asyncio.TimeoutError:
        print(" ")
    except Exception as e:
        print(f"‚ùå Erro no check_win: {e}")

    # Calcula lucro real via varia√ß√£o de saldo
    final_balance, _ = await get_balance(client)
    calculated_profit = round(final_balance - initial_balance, 2)
    print(f"üí∞ Saldo: Inicial=${initial_balance} | Final=${final_balance} | Lucro/Preju√≠zo=${calculated_profit}")

    status = getattr(final_result, 'status', 'N/A') if final_result else 'N/A'
    resultado = get_resultado_final(calculated_profit, win_result, status)
    print(f"üìä Resultado Final: {resultado} (Lucro Real: ${calculated_profit})")

    return final_result, win_result, calculated_profit

def get_connection_stats(client):
    try:
        stats = client.get_connection_stats()
        return stats
    except Exception as e:
        print(f"‚ùå Erro nas estat√≠sticas de conex√£o: {e}")
        return {}

# =========================
# Impress√£o do Log (Formato PT-BR com Emojis)
# =========================
def print_header():
    print("ü§ñ Bem-vindos ao JhonesProIA ü§ñ")
    print("üü¢ Inicializando JhonesProPocketBoT...")
    print("‚úÖ JhonesProPocketBoT e API PocketOption inicializados com sucesso!\n")

    print("üìÇ Resultados")
    print("----------------------------------------")
    prev_result = load_resultados()
    print(f"üìÇ Resultados carregados de: {RESULTADOS_FILE}")
    # Se a √∫ltima linha j√° incluir timestamp, mantenha como est√°; caso contr√°rio, apresente simples:
    print(f"{prev_result}\n")

    print("üîê Autentica√ß√£o e Conex√£o")
    print("----------------------------------------")
    print(f"üîë SSID Utilizado: CONTA DEMO")
    print("üåê Conectando √† PocketOption...")
    print("‚úÖ Conectado com Sucesso!")

def print_saldo(saldo, moeda):
    print(f"üí∞ Saldo Atual: ${saldo} {moeda}")

def print_dados_mercado(total_candles, ultima_vela):
    print("\nüìä Dados de Mercado")
    print("----------------------------------------")
    print(f"üî¢ Total de Velas: {total_candles}")
    if ultima_vela:
        # Algumas libs usam atributos diferentes; ajuste se necess√°rio
        o = getattr(ultima_vela, 'open', None)
        c = getattr(ultima_vela, 'close', None)
        h = getattr(ultima_vela, 'high', None)
        l = getattr(ultima_vela, 'low', None)
        ts = getattr(ultima_vela, 'timestamp', None)
        print("üïØÔ∏è Informa√ß√µes da √öltima Vela:")
        print(f"   üìà Abertura: {o}")
        print(f"   üìâ Fechamento: {c}")
        print(f"   ‚§¥Ô∏è  M√°xima: {h}")
        print(f"   ‚§µÔ∏è  M√≠nima: {l}")
        print(f"   üïí Hor√°rio: {ts}")

def print_stats(stats):
    print("\nüì° Estat√≠sticas de Conex√£o")
    print("----------------------------------------")
    if not stats:
        print("‚ùå Sem estat√≠sticas dispon√≠veis.")
        return

    total_connections = stats.get('total_connections', 'N/A')
    successful_connections = stats.get('successful_connections', 'N/A')
    total_reconnects = stats.get('total_reconnects', 'N/A')
    last_ping_time = stats.get('last_ping_time', 'N/A')
    messages_sent = stats.get('messages_sent', 'N/A')
    messages_received = stats.get('messages_received', 'N/A')
    websocket_connected = bool_pt(stats.get('websocket_connected', 'N/A'))
    conn_info = stats.get('connection_info')

    connected_at = getattr(conn_info, 'connected_at', 'N/A') if conn_info else 'N/A'
    region = getattr(conn_info, 'region', 'N/A') if conn_info else 'N/A'

    print(f"üîó Conex√µes Totais: {total_connections}")
    print(f"‚úÖ Conex√µes Bem-Sucedidas: {successful_connections}")
    print(f"‚ôªÔ∏è  Total de Reconex√µes: {total_reconnects}")
    print(f"üïí Hor√°rio do √öltimo Ping: {last_ping_time}")
    print(f"‚úâÔ∏è  Mensagens Enviadas/Recebidas: {messages_sent}/{messages_received}")
    print(f"üåê WebSocket Conectado: {websocket_connected}")
    print(f"üìÖ Conectado em: {format_dt_full(connected_at)}")
    print(f"üåç Regi√£o: {region}")

def print_operacao_registro(final_result, win_result, calculated_profit):
    status = getattr(final_result, 'status', 'N/A') if final_result else 'N/A'
    resultado = get_resultado_final(calculated_profit, win_result, status)
    print(f"\nüìà Registro da Opera√ß√£o")
    print("----------------------------------------")
    print(f"üèÅ Resultado: {resultado} | üíπ Lucro Total: ${calculated_profit}")
    save_resultados(f"Lucro= ${calculated_profit}, Resultado= {resultado}")

def print_footer():
    print("\nüîö Finaliza√ß√£o")
    print("----------------------------------------")
    print("üîå Desconectando...")
    print("‚úÖ Conex√£o Encerrada com Sucesso.")

# =========================
# Fluxo Principal
# =========================
async def main():
    print_header()

    # Cliente com DEMO habilitado e logging interno desativado (logs customizados nossos)
    client = AsyncPocketOptionClient(SSID_FIXO, is_demo=True, enable_logging=False)

    # Conex√£o
    try:
        await client.connect()
    except Exception as e:
        print(f"‚ùå Erro na conex√£o: {e}")
        return

    # Saldo inicial
    initial_balance, moeda = await get_balance(client)
    print_saldo(initial_balance, moeda)

    # Dados de mercado
    total_candles, ultima_vela = await get_candles(client)
    print_dados_mercado(total_candles, ultima_vela)

    # (Opcional) DataFrame completo ‚Äî n√£o exibimos para n√£o poluir o log
    _ = await get_candles_dataframe(client)

    # (Opcional) Ordens ativas ‚Äî n√£o exibidas
    _ = await get_active_orders(client)

    # Estat√≠sticas de conex√£o
    stats = get_connection_stats(client)
    print_stats(stats)

    # Envio da ordem
    order = await place_order(client)
    if order:
        order_id = getattr(order, 'order_id', None) or getattr(order, 'id', None)
        final_result, win_result, calculated_profit = await wait_for_expiry_and_check(client, order_id, initial_balance)
        print_operacao_registro(final_result, win_result, calculated_profit)
    else:
        print("\nüöÄ Opera√ß√µes Autom√°ticas")
        print("----------------------------------------")
        print("‚ùå Nenhuma ordem enviada.")

    # Finaliza√ß√£o
    print_footer()
    await client.disconnect()

if __name__ == "__main__":
    asyncio.run(main())
